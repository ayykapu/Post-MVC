// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240130013028_Intital")]
    partial class Intital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("Data.Entities.CommentEntity", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommentAuthor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            CommentAuthor = "Użytkownik1",
                            CommentContent = "Świetny post!",
                            CommentDate = new DateTime(2024, 1, 28, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1175),
                            PostId = 1
                        },
                        new
                        {
                            CommentId = 2,
                            CommentAuthor = "Użytkownik2",
                            CommentContent = "Ciekawe spostrzeżenia!",
                            CommentDate = new DateTime(2024, 1, 29, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1269),
                            PostId = 1
                        },
                        new
                        {
                            CommentId = 3,
                            CommentAuthor = "Użytkownik3",
                            CommentContent = "Mam pytanie...",
                            CommentDate = new DateTime(2024, 1, 29, 20, 30, 27, 573, DateTimeKind.Local).AddTicks(1272),
                            PostId = 2
                        },
                        new
                        {
                            CommentId = 4,
                            CommentAuthor = "Użytkownik4",
                            CommentContent = "Dobrze napisane!",
                            CommentDate = new DateTime(2024, 1, 30, 2, 0, 27, 573, DateTimeKind.Local).AddTicks(1277),
                            PostId = 3
                        },
                        new
                        {
                            CommentId = 5,
                            CommentAuthor = "Użytkownik5",
                            CommentContent = "Zgadzam się całkowicie!",
                            CommentDate = new DateTime(2024, 1, 30, 2, 30, 17, 573, DateTimeKind.Local).AddTicks(1280),
                            PostId = 3
                        });
                });

            modelBuilder.Entity("Data.Entities.PostEntity", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostAuthor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            PostAuthor = "Janek",
                            PostContent = "Lorem Lorem",
                            PostDate = new DateTime(2024, 1, 30, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1352),
                            TagId = 1
                        },
                        new
                        {
                            PostId = 2,
                            PostAuthor = "Grzegorz",
                            PostContent = "Kocham jak w końcu działa mi w projekcie identity.",
                            PostDate = new DateTime(2024, 1, 30, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1361),
                            TagId = 2
                        },
                        new
                        {
                            PostId = 3,
                            PostAuthor = "Ania",
                            PostContent = "ZZZZZ",
                            PostDate = new DateTime(2024, 1, 30, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1362),
                            TagId = 3
                        },
                        new
                        {
                            PostId = 4,
                            PostAuthor = "Kasia",
                            PostContent = "Tragiczna dziś podoga!",
                            PostDate = new DateTime(2024, 1, 30, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1372),
                            TagId = 4
                        },
                        new
                        {
                            PostId = 5,
                            PostAuthor = "Alex",
                            PostContent = "Kocham Kraków.",
                            PostDate = new DateTime(2024, 1, 30, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1374),
                            TagId = 5
                        },
                        new
                        {
                            PostId = 6,
                            PostAuthor = "Michał",
                            PostContent = "Nowe odkrycia archeologiczne na Bliskim Wschodzie.",
                            PostDate = new DateTime(2024, 1, 29, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1378),
                            TagId = 1
                        },
                        new
                        {
                            PostId = 7,
                            PostAuthor = "Karolina",
                            PostContent = "Najnowsze trendy w świecie mody.",
                            PostDate = new DateTime(2024, 1, 28, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1380),
                            TagId = 2
                        },
                        new
                        {
                            PostId = 8,
                            PostAuthor = "Piotrek",
                            PostContent = "Odkryto nowe gatunki roślin w dżungli Amazonii.",
                            PostDate = new DateTime(2024, 1, 27, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1381),
                            TagId = 3
                        },
                        new
                        {
                            PostId = 9,
                            PostAuthor = "Magda",
                            PostContent = "Porównanie aparatów fotograficznych: Canon vs Nikon.",
                            PostDate = new DateTime(2024, 1, 26, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1383),
                            TagId = 4
                        },
                        new
                        {
                            PostId = 10,
                            PostAuthor = "Bartek",
                            PostContent = "Przyszłość sztucznej inteligencji.",
                            PostDate = new DateTime(2024, 1, 25, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1385),
                            TagId = 5
                        },
                        new
                        {
                            PostId = 11,
                            PostAuthor = "Monika",
                            PostContent = "Rekordy Guinnessa w sporcie.",
                            PostDate = new DateTime(2024, 1, 24, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1406),
                            TagId = 1
                        },
                        new
                        {
                            PostId = 12,
                            PostAuthor = "Tomasz",
                            PostContent = "Historia rozwoju technologii komputerowej.",
                            PostDate = new DateTime(2024, 1, 23, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1408),
                            TagId = 2
                        },
                        new
                        {
                            PostId = 13,
                            PostAuthor = "Ola",
                            PostContent = "Badania nad życiem pozaziemskim.",
                            PostDate = new DateTime(2024, 1, 22, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1410),
                            TagId = 3
                        },
                        new
                        {
                            PostId = 14,
                            PostAuthor = "Łukasz",
                            PostContent = "Nowości na rynku samochodowym.",
                            PostDate = new DateTime(2024, 1, 21, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1414),
                            TagId = 4
                        },
                        new
                        {
                            PostId = 15,
                            PostAuthor = "Natalia",
                            PostContent = "Kulinarne podróże po świecie.",
                            PostDate = new DateTime(2024, 1, 20, 2, 30, 27, 573, DateTimeKind.Local).AddTicks(1416),
                            TagId = 5
                        });
                });

            modelBuilder.Entity("Data.Entities.TagEntity", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            TagTitle = "Rozrywka"
                        },
                        new
                        {
                            TagId = 2,
                            TagTitle = "Nauka"
                        },
                        new
                        {
                            TagId = 3,
                            TagTitle = "Polityka"
                        },
                        new
                        {
                            TagId = 4,
                            TagTitle = "Zdrowie"
                        },
                        new
                        {
                            TagId = 5,
                            TagTitle = "Sport"
                        },
                        new
                        {
                            TagId = 6,
                            TagTitle = "Technologia"
                        },
                        new
                        {
                            TagId = 7,
                            TagTitle = "Rozwój"
                        },
                        new
                        {
                            TagId = 8,
                            TagTitle = "Odkrycia"
                        },
                        new
                        {
                            TagId = 9,
                            TagTitle = "Podróże"
                        },
                        new
                        {
                            TagId = 10,
                            TagTitle = "Innowacje"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "eeb6b469-99ee-4478-86be-345da096ba70",
                            ConcurrencyStamp = "eeb6b469-99ee-4478-86be-345da096ba70",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3e4ac12f-0d75-4471-a0e3-3e5058771d13",
                            ConcurrencyStamp = "3e4ac12f-0d75-4471-a0e3-3e5058771d13",
                            Name = "mod",
                            NormalizedName = "MOD"
                        },
                        new
                        {
                            Id = "794dd682-e4b9-4415-b033-c0762ff2a6d8",
                            ConcurrencyStamp = "794dd682-e4b9-4415-b033-c0762ff2a6d8",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c6061091-4aae-4a7b-ac89-0b7503698bc4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d9396b9-2a7d-4b39-a273-f46b5bcab3d2",
                            Email = "tadek123@gmail.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TADEK123@GMAIL.PL",
                            NormalizedUserName = "TADEK",
                            PasswordHash = "AQAAAAIAAYagAAAAEBDgcrC0UdpzQPKsld6AMJ7eZP8eqA1Y0HfN4dP/9qarf1y4wGYMstlpWcfbN6n5BA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06756371-29a9-4fed-a0ee-72ffcfd87097",
                            TwoFactorEnabled = false,
                            UserName = "Tadek"
                        },
                        new
                        {
                            Id = "9211d460-777d-4534-8a47-664e4647a4c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "caa7f1ee-11fd-4262-bc0d-02673b82e4a7",
                            Email = "tomasz@o2.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOMASZ@o2.PL",
                            NormalizedUserName = "TOMASZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEMTGS+zDvH6yS+Tt0ULEQFoLZntmC9QZ6qcnZhPuHU5JHbzrjj6oay9jKTAHK+B7gw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91db10ac-b617-404e-b093-eb07f18699b5",
                            TwoFactorEnabled = false,
                            UserName = "Tomasz"
                        },
                        new
                        {
                            Id = "02115dc0-ebbe-4d42-94ab-9ad4711f388d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c3b1813-a194-4cfe-b3d7-87dd09d7ca10",
                            Email = "arkadiuszpol@onet.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ARKADIUSZPOL@ONET.PL",
                            NormalizedUserName = "ARKADIUSZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEBaZm2pVV3AfcyB1UeNcjkQgwMef9XyjJb+AvewH3PA+za1LBGyUZEtDgzd7BC2Jmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c54927c2-bfe8-4f80-aaf1-407bda92dec8",
                            TwoFactorEnabled = false,
                            UserName = "Arkadiusz"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c6061091-4aae-4a7b-ac89-0b7503698bc4",
                            RoleId = "eeb6b469-99ee-4478-86be-345da096ba70"
                        },
                        new
                        {
                            UserId = "9211d460-777d-4534-8a47-664e4647a4c6",
                            RoleId = "3e4ac12f-0d75-4471-a0e3-3e5058771d13"
                        },
                        new
                        {
                            UserId = "02115dc0-ebbe-4d42-94ab-9ad4711f388d",
                            RoleId = "794dd682-e4b9-4415-b033-c0762ff2a6d8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.CommentEntity", b =>
                {
                    b.HasOne("Data.Entities.PostEntity", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Data.Entities.PostEntity", b =>
                {
                    b.HasOne("Data.Entities.TagEntity", "Tag")
                        .WithMany("Posts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.PostEntity", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Data.Entities.TagEntity", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
